Notation:
,     Concat
|     Alternative
{}     1 or more
()    Grouping
[]    optional    
??    Special Form

program                 = {function_definition | if_else_statements | function_call | statement | variable_define | conditional_exp | expression} ;
function_definition     = "fn" , identifier , "(" , [arguments] , ")" , "{" , {statement} , "}" 
other_arg               = ",", expression ; 
arguments               = expression , [other_arg] ;
variable_define         = "let" , identifier , "=" , expression ;
function_return         = "return", (function_call | expression | identifier) ;
statement               = variable_define , ";" ;
expression              = boolean | math_expression | function_call | string ;
math_expression         = l1 ; 
l1                      = l2, [l1_infix] ;
l2                      = l3, [l2_infix] ; 
l3                      = l4, [l3_infix] ; 
l1_infix                = ("+" | "-"), l2 ;
l2_infix                = ("*" | "/"), l2 ;
l3_infix                = "^", l4 ; 
l4                      = (function_call | number | identifier | parenthetical_expression) ;
parenthetical_expression = "(" , l1, ")" ;
function_call           = identifier , "(" , [arguments] , ")" ;
if                      = "if", conditional_ex, "{", [statement], function_return, "}" ; 
else                    =  "else", "{", [statement], function_return, "}" ;
else_if                 = "else if", conditional_ex, "{", [statement], function_return, "}" ;
if_else                 = if, [else_if], else ;
conditional_exp         = conditional_val, conditional_operator, conditional_val, [conditional_operator, conditional_val] ;
conditional_val         = number | boolean | identifier | math_expression ;
conditional_operator    = "<" | ">" | "<=" | ">=" | "==" | "!=" ;
function_return         = "return", (function_call | expression | identifier) ;
statement               = variable_define , ";" ;
string                  = "\"" , {alnum | " "} , "\"" ;
boolean                 = "true" | "false" ;
identifier              = {alnum} ;
number                  = {digit};
alnum                   = ?alphanumeric character?;
alpha                   = ?alphabetic or equivalent character?;
digit                   = 0..9;
whitespace              = space | tab | newline; 
Note: The grammar above doesn't handle whitespace but the parser I've written handles whitespace as defined below


Valid Expressions - Conditional Operators
1. 1 > 3 == true

Parse Tree:
 Program {
    children: [
        ConditionalExpression {
            children: [
                ConditionalValue {
                    children: [
                        Number {
                            value: 1,
                        },
                    ],
                },
                ConditionalOperator {
                    value: ">",
                },
                ConditionalValue {
                    children: [
                        Number {
                            value: 3,
                        },
                    ],
                },
                ConditionalOperator {
                    value: "==",
                },
                ConditionalValue {
                    children: [
                        Bool {
                            value: true,
                        },
                    ],
                },
            ],
        },
    ],
}
{"main": [FunctionReturn { children: [ConditionalExpression { children: [ConditionalValue { children: [Number { value: 1 }] }, ConditionalOperator { value: ">" }, ConditionalValue { children: [Number { value: 3 }] }, ConditionalOperator { value: "==" }, ConditionalValue { children: [Bool { value: true }] }] }] }]}

2. a < b + c

Parse Tree:
 Program {
    children: [
        ConditionalExpression {
            children: [
                ConditionalValue {
                    children: [
                        Identifier {
                            value: "a",
                        },
                    ],
                },
                ConditionalOperator {
                    value: "<",
                },
                ConditionalValue {
                    children: [
                        MathExpression {
                            name: "+",
                            children: [
                                Identifier {
                                    value: "b",
                                },
                                Identifier {
                                    value: "c",
                                },
                            ],
                        },
                    ],
                },
            ],
        },
    ],
}
{"main": [FunctionReturn { children: [ConditionalExpression { children: [ConditionalValue { children: [Identifier { value: "a" }] }, ConditionalOperator { value: "<" }, ConditionalValue { children: [MathExpression { name: "+", children: [Identifier { value: "b" }, Identifier { value: "c" }] }] }] }] }]}

3. false == p

Parse Tree:
 Program {
    children: [
        ConditionalExpression {
            children: [
                ConditionalValue {
                    children: [
                        Bool {
                            value: false,
                        },
                    ],
                },
                ConditionalOperator {
                    value: "==",
                },
                ConditionalValue {
                    children: [
                        Identifier {
                            value: "p",
                        },
                    ],
                },
            ],
        },
    ],
}
{"main": [FunctionReturn { children: [ConditionalExpression { children: [ConditionalValue { children: [Bool { value: false }] }, ConditionalOperator { value: "==" }, ConditionalValue { children: [Identifier { value: "p" }] }] }] }]}


Invalid Expressions - Conditional Operators
1. false + 9 => isn't a conditional expression
Unparsed Text: " + 9"
Parse Tree:
 Program {
    children: [
        Expression {
            children: [
                Bool {
                    value: false,
                },
            ],
        },
    ],
}

2. 9 < true => can't compare number to boolean 

3. a = 9 => isn't a conditional expression 
Unparsed Text: " = 9"
Parse Tree:
 Program {
    children: [
        Expression {
            children: [
                Identifier {
                    value: "a",
                },
            ],
        },
    ],
}



Valid Expressions - If - Expressions
1. if 1 < 2 {
    return false;
    } else if 8 == 7 {
    return true;
    } else {
        return false;
    }

Parse Tree:
 Program {
    children: [
        IfElseStatements {
            children: [
                IfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 1,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: "<",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 2,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: false,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseIfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 8,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: "==",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 7,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: true,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseStatement {
                    children: [
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: false,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
    ],
}


2. if 1 < 2 {
    let x = 9;
    return false;
    } else if 3 != 2 {
    return false;
    } else {
        return true;
    }


Parse Tree:
 Program {
    children: [
        IfElseStatements {
            children: [
                IfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 1,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: "<",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 2,
                                        },
                                    ],
                                },
                            ],
                        },
                        Statement {
                            children: [
                                VariableDefine {
                                    children: [
                                        Identifier {
                                            value: "x",
                                        },
                                        Expression {
                                            children: [
                                                Number {
                                                    value: 9,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: false,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseIfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 3,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: "!=",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 2,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: false,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseStatement {
                    children: [
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: true,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
    ],
}

3. if 7 > 3 {
    return true;
    } else {
        let t = 67;
        return false;
    }

Parse Tree:
 Program {
    children: [
        IfElseStatements {
            children: [
                IfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 7,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: ">",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 3,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: true,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseStatement {
                    children: [
                        Statement {
                            children: [
                                VariableDefine {
                                    children: [
                                        Identifier {
                                            value: "t",
                                        },
                                        Expression {
                                            children: [
                                                Number {
                                                    value: 67,
                                                },
                                            ],
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Bool {
                                            value: false,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
    ],
}

4. if 4 > 3 {return 1;} else if 7 == 9 {return 2;} else {return 3;}
Parse Tree:
 Program {
    children: [
        IfElseStatements {
            children: [
                IfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 4,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: ">",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 3,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Number {
                                            value: 1,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseIfStatement {
                    children: [
                        ConditionalExpression {
                            children: [
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 7,
                                        },
                                    ],
                                },
                                ConditionalOperator {
                                    value: "==",
                                },
                                ConditionalValue {
                                    children: [
                                        Number {
                                            value: 9,
                                        },
                                    ],
                                },
                            ],
                        },
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Number {
                                            value: 2,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
                ElseStatement {
                    children: [
                        FunctionReturn {
                            children: [
                                Expression {
                                    children: [
                                        Number {
                                            value: 3,
                                        },
                                    ],
                                },
                            ],
                        },
                    ],
                },
            ],
        },
    ],
}


Invalid Expressions - If - Expressions
1. if 7 > 3 {
    let y = 2;
    } else {
        let t = 67;
        return false;
    }

ERROR Error(Error { input: "} else {\n        let t = 67;\n        return false;\n    }\n    ", code: Tag }) 
=> no return statement in if block 


2. if 7 > 3 {
    let y = 2;
    return true;
     else {
        let t = 67;
        return false;
    }
ERROR Error(Error { input: "else {\n        let t = 67;\n        return false;\n    }\n    ", code: Tag }) 
=> missing curly brace 

3. if 7 > 3 {
    let y = 2;
    return true;
   } 
ERROR Error(Error { input: "\n    ", code: Tag })
=> missing else block 